#!/usr/bin/env bash

new_ext='.webm'

# Colours
[[ -t 1 ]] && {
    c_d=$'\e[1;30m' # GREY
    c_r=$'\e[1;31m' # RED
    c_g=$'\e[1;32m' # GREEN
    c_y=$'\e[1;33m' # YELLOW
    c_b=$'\e[1;34m' # BLUE
    c_m=$'\e[1;35m' # VIOLET
    c_t=$'\e[1;36m' # TEAL
    c_w=$'\e[1;37m' # WHITE
    c_c=$'\e[0m'    # DISABLES COLOUR
}

function help {
    script_name="${0//*\/}"
    printf '\n%s\n\n'      "${c_w}Convert mp4 videos to webm with ffmpeg$c_c"
    printf '%s\n'          "${c_b}SYNOPSIS$c_c"
    printf '  %s\n'        "$c_y$script_name $c_d[${c_r}QUALITY$c_d]$c_c"
    printf '  %s\n\n'      "$c_y$script_name $c_w-h$c_d|$c_w--help$c_c"
    printf '%s\n'          "${c_b}EXAMPLES$c_c"
    printf '  %-27s%s\n'   "$c_y$script_name$c_c" 'Convert all files in current directory with autodetected bitrate'
    printf '  %-34s%s\n\n' "$c_y$script_name ${c_w}8M$c_c" 'Convert all files in current directory with a bitrate of 8M'
}

function error {
    printf '%s %s\n' "${c_r}ERROR:$c_c" "$c_w$1$c_c" >&2
}

function convert_mp4 {
    # Figure out number of cores
    if [[ "$(uname)" = 'Darwin' ]]; then
        num_cores="$(sysctl -n hw.ncpu)"
    elif [[ "$(uname)" =~ Linux ]]; then
        while read -r; do
            [[ "$REPLY" =~ ^processor[^:]*:[^0-9]*([0-9][0-9]*) ]] && {
                num_cores="${BASH_REMATCH[1]}"
                num_cores=$(( num_cores + 1 ))
            }
        done < /proc/cpuinfo
    else
        num_cores=1
    fi

    printf '%s %s\n' "$c_b==>" "$c_w$num_cores cores detected$c_c"

    # Check and see if the folder "converting" exists. If it doesn't then we want to create it.
    [[ -d converting ]] || install -d converting

    # Determine old extension
    old_ext="${1/*\.}"

    # Determine new filename
    new_file="${1/\.${old_ext}}${new_ext}"

    # Convert video
    ffmpeg -i "$1" -c:v libvpx -crf 4 -q:v 10 -b:v "$2" -c:a libvorbis -threads "$num_cores" "converting/$new_file"

    # Move new webm files into "created" folder
    mkclean --doctype 4 --keep-cues --optimize "converting/$new_file" "$new_file"

    # Remove the converting file and directory
    rm "converting/$new_file"
    rmdir converting
}

type -P ffmpeg >/dev/null || {
    error 'The ffmpeg executable was not found in $PATH'
    exit 1
}

[[ "$1" = '-h' || "$1" = '--help' ]] && {
    help
    exit 0
}

if [[ -n "$1" ]]; then
    bitrate="$1"
else
    bitrate=auto
fi

for video in *.mp4; do
    if [[ "$bitrate" = 'auto' ]]; then
        convert_mp4 "$video" "$(ffmpeg -i "$video" 2>&1 | grep 'Duration' | grep -oe '[0-9][0-9][0-9]* kb/s' | sed 's| *kb/s||' | sed -r 's|([0-9])([0-9]*)|\1.\2M|')"
    else
        convert_mp4 "$video" "$bitrate"
    fi
done
